generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- Auth --------------------
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  password      Password?
  refreshTokens RefreshToken[]
  emailVerified Boolean        @default(false)

  authProvider AuthProvider @default(CREDENTIALS)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // relations
  projectsOwned Project[]       @relation("OwnerProjects")
  projectMember ProjectMember[]
  teamMember    TeamMember[]
  task          Task[]
  comments      Comment[]
  timeEntries   TimeEntry[]
  auditLogs     AuditLog[]
  stakeholder   Stakeholder[]

  EmailVerificationToken EmailVerificationToken[]
}

// -------------------- Passwords --------------------
model Password {
  id          String @id @default(uuid())
  hashedValue String
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// -------------------- Refresh Tokens --------------------
model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String
  revoked     Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ------------------- Auth Providers ---------------------
enum AuthProvider {
  CREDENTIALS
  GOOGLE
  GITHUB
  MICROSOFT
}

// -------------------- Roles & RBAC --------------------
model Role {
  id              String           @id @default(uuid())
  name            String
  scope           RoleScope        @default(PROJECT) // <--- ny, säger om rollen gäller team eller project
  permissions     RolePermission[]
  projectMembers  ProjectMember[]
  teamMembers     TeamMember[]
  teamInvitations TeamInvitation[]

  @@unique([name, scope])
}

enum RoleScope {
  TEAM
  PROJECT
}

model RolePermission {
  id        String  @id @default(uuid())
  roleId    String
  entity    String // t.ex. "Task", "Project", "Milestone", "Comment"
  canCreate Boolean @default(false)
  canRead   Boolean @default(true)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, entity])
}

// -------------------- Teams --------------------
model Team {
  id             String           @id @default(uuid())
  name           String
  users          TeamMember[]
  projects       Project[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  TeamInvitation TeamInvitation[]
}

model TeamMember {
  id     String @id @default(uuid())
  teamId String
  userId String
  roleId String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id])

  @@unique([teamId, userId])
}

// -------------------- Projects --------------------
model Project {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String  @default("#3B82F6")
  ownerId     String
  teamId      String

  owner           User             @relation("OwnerProjects", fields: [ownerId], references: [id])
  team            Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  members         ProjectMember[]
  milestones      Milestone[]
  statuses        Status[]
  categories      Category[]
  tasks           Task[]
  teamInvitations TeamInvitation[]
  attachments     Attachment[]
  stakeholders    Stakeholder[]
  auditLogs       AuditLog[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// -------------------- Project Members --------------------
model ProjectMember {
  id        String @id @default(uuid())
  projectId String
  userId    String
  roleId    String

  invitedBy String?
  joinedAt  DateTime?
  createdAt DateTime  @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id])

  @@unique([projectId, userId])
}

// -------------------- Milestones --------------------
model Milestone {
  id        String    @id @default(uuid())
  projectId String
  name      String
  startDate DateTime?
  endDate   DateTime?
  tasks     Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// -------------------- Statuses --------------------
model Status {
  id          String   @id @default(uuid())
  projectId   String
  name        String
  color       String   @default("#6B7280")
  position    Int      @default(0)
  isDefault   Boolean  @default(false)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task[]
}

// -------------------- Categories --------------------
model Category {
  id        String   @id @default(uuid())
  projectId String
  name      String
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task    Task[]
}

// -------------------- Tasks --------------------
model Task {
  id          String    @id @default(uuid())
  projectId   String
  milestoneId String?
  title       String
  description String?
  statusId    String
  categoryId  String?
  priority    Priority  @default(MEDIUM)
  assigneeId  String?
  progress    Int       @default(0)
  tags        String[]
  color       String    @default("#3B82F6")
  startDate   DateTime?
  endDate     DateTime?
  dueDate     DateTime?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone    Milestone?       @relation(fields: [milestoneId], references: [id])
  status       Status           @relation(fields: [statusId], references: [id])
  category     Category?        @relation(fields: [categoryId], references: [id])
  assignee     User?            @relation(fields: [assigneeId], references: [id])
  comments     Comment[]
  timeEntries  TimeEntry[]
  dependencies TaskDependency[] @relation("task_dependencies")
  dependents   TaskDependency[] @relation("dependent_tasks")
  attachment   Attachment[]
  linkedTasks  TaskLink[]       @relation("task_links")
  linkedFrom   TaskLink[]       @relation("linked_to")
}

// -------------------- Task Links --------------------
model TaskLink {
  id     String @id @default(uuid())
  fromId String
  toId   String
  type   String @default("dependency")

  fromTask Task @relation("task_links", fields: [fromId], references: [id], onDelete: Cascade)
  toTask   Task @relation("linked_to", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
}

// -------------------- Comments --------------------
model Comment {
  id        String   @id @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------- Priorities --------------------
enum Priority {
  LOW
  MEDIUM
  HIGH
}

// -------------------- Team Invitations --------------------
model TeamInvitation {
  id         String    @id @default(uuid())
  teamId     String
  email      String
  roleId     String
  invitedBy  String
  token      String    @default(uuid())
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id])
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

// -------------------- Time Entries --------------------
model TimeEntry {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  minutes   Int
  note      String?
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

// -------------------- Task Dependencies --------------------
model TaskDependency {
  id          String   @id @default(uuid())
  taskId      String
  dependsOnId String
  type        String   @default("finish-to-start")
  createdAt   DateTime @default(now())

  task      Task @relation("task_dependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn Task @relation("dependent_tasks", fields: [dependsOnId], references: [id])

  @@unique([taskId, dependsOnId])
}

// -------------------- Attachments --------------------
model Attachment {
  id        String   @id @default(uuid())
  taskId    String?
  projectId String?
  url       String
  filename  String
  mimeType  String
  createdBy String
  createdAt DateTime @default(now())

  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// -------------------- Stakeholders --------------------
model Stakeholder {
  id        String   @id @default(uuid())
  projectId String
  userId    String?
  name      String
  role      String
  contact   String?
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])
}

// -------------------- Audit Log --------------------
model AuditLog {
  id         String      @id @default(uuid())
  projectId  String?
  userId     String?
  action     AuditAction
  targetType AuditTarget
  targetId   String?
  meta       Json?
  createdAt  DateTime    @default(now())

  project Project? @relation(fields: [projectId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])
}

enum AuditAction {
  CREATED
  UPDATED
  DELETED
  ASSIGNED
  UNASSIGNED
  STATUS_CHANGED
  COMMENTED
  FILE_UPLOADED
  FILE_DELETED
  INVITED
  JOINED
  LEFT
  ROLE_CHANGED
}

enum AuditTarget {
  TEAM
  PROJECT
  MILESTONE
  TASK
  COMMENT
  ATTACHMENT
  USER
}
